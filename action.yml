apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Configure Git Global Credentials'
description: 'Configures credentials in the Git global configuration'
inputs:
  provider:
    description: 'SCM provider that is hosting the repository. For example github, bitbucket, gitlab or custom'
    default: "${{ cloudbees.scm.provider }}"
  repositories:
    description: >
      Whitespace and/or comma separated list of repository names with owner. For example, `actions/checkout`. 
      Alternatively if provider is `custom` then this is the clone URL of the repositories
      
      If not specified and the `provider` has not been overridden the action will try to infer what the value should be
      from the triggering event. For example if this action is run in the GitHub repository `example/foo` then the 
      inferred default repositories value would be `example/*`
      
      If a default value cannot be inferred then the action will fail in anticipation that you will explicitly 
      configure the value for subsequent runs.
      
      Configuring this value in conjunction with `ssh-key` is an error as the SSH key has to be installed for all SSH 
      repositories.
    required: false
  cloudbees-api-token:
    description: >
      The CloudBees API Token to use for fetching SCM tokens unless `token` or `ssh-key` have been configured
    default: "${{ cloudbees.api.token }}"
  cloudbees-api-url:
    description: The CloudBees API root URL to use for fetching SCM tokens
    default: "${{ cloudbees.api.url }}"
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands.
  ssh-key:
    description: >
      SSH key used to fetch repositories. The SSH key is configured with the global
      git config, which enables your scripts to run authenticated git commands.
      
      NOTE: the SSH key will only be used by Git clients that understand how to use
      the `core.sshCommand` configuration key. If you are using a custom Git client that 
      cannot process a custom `core.sshCommand` then the SSH key configuration will be
      ignored by that client. The standard Git CLI will process the `core.sshCommand` 
      configuration.
      
      NOTE: the SSH key will be configured for all SSH remotes. This option is not 
      compatible with specifying `repositories` as the SSH key has to be installed
      for all SSH repositories.

      We recommend using a service account with the least permissions necessary.
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public keys for github.com, bitbucket.org and gitlab.com are always implicitly added.
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
      configure additional hosts.
    default: "true"
  github-server-url:
    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults (i.e. the GITHUB_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
    required: false
  bitbucket-server-url:
    description: The base URL for the Bitbucket instance that you are trying to clone from, will use environment defaults (i.e. the BITBUCKET_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://bitbucket.org or https://my-bbdc-server.example.com
    required: false
  gitlab-server-url:
    description: The base URL for the GitLab instance that you are trying to clone from, will use environment defaults (i.e. the GITLAB_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://gitlab.com or https://my-gl-server.example.com
    required: false
runs:
  using: composite
  steps:
    - name: Configure Git Global Credentials
      uses: docker://registry.saas-dev.beescloud.com/staging/configure-git-global-credentials:v1.0.8
      env:
        CLOUDBEES_EVENT_PATH: /cloudbees/event.json
        INPUT_PROVDER: "${{ inputs.provider }}"
        INPUT_REPOSITORIES: "${{ inputs.repositories }}"
        INPUT_TOKEN: "${{ inputs.token }}"
        INPUT_SSH_KEY: "${{ inputs.ssh-key }}"
        INPUT_SSH_KNOWN_HOSTS: "${{ inputs.ssh-known-hosts }}"
        INPUT_SSH_STRICT: "${{ inputs.ssh-strict }}"
        INPUT_GITHUB_SERVER_URL: "${{ inputs.github-server-url }}"
        INPUT_BITBUCKET_SERVER_URL: "${{ inputs.bitbucket-server-url }}"
        INPUT_CLOUDBEES_API_TOKEN: "${{ inputs.cloudbees-api-token }}"
        INPUT_CLOUDBEES_API_URL: "${{ inputs.cloudbees-api-url }}"
      with:
        args: "configure"
        entrypoint: "configure-git-global-credentials"
